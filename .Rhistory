TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTrue(6>4)
isTRUE(6>4)
identical("twins","twins")
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
swirl()
swirl()
options(editor = "internal")
swirl()
submit()
source('C:/Users/Stefan/Desktop/Data/R_Programming/Lesson 2/Programming_practice_swirl.R')
submit()
submit()
submit()
submit()
boring_fucntion('My first function')
boring_function('My first function')
boring_function('My first function!')
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11,5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8, 4, 0))
evaluate(function(x){x[length(dat)]},c(8, 4, 0))
evaluate(function(x){x[length(c(8, 4, 0))]},c(8, 4, 0))
evaluate(function(x){x[length(x)]},c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Howdy","Cowboy")
submit()
mad_libs("New York","angry","reform")
submit()
"I" '%p%' "love" '%p%' "R!"
'I' '%p%' 'love' '%p%' 'R!'
'I' %p% 'love' %p% 'R!'
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date(1969-01-01)
d2 <- as.Date("1969-01-01"")
d2 <- as.Date("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(t1)
t2 <- as.POSIXlt(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
month(t1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4<- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(),t1, units ='days')
load(swirl)
load('swirl')
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4 replace = TRUE)
sample(1:6,4, replace = TRUE)
sample(1:6,4, replace = TRUE)
sample(1:20,10)
letters()
letters
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace=TRUE, prob = c(0.3,0.7))
flips <- sample(c(0,1), 100, replace=TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
+rnorm
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, lambda = 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
colMeans(my_pois, na.rm = TRUE)
cm<- colMeans(my_pois, na.rm = TRUE)
cm<- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x= cars$speed, y= cars$dist)
plot(y= cars$speed, x= cars$dist)
plot(x= cars$speed, y= cars$dist, labels(x,"Speed"))
plot(x= cars$speed, y= cars$dist, xlab = "Speed")
plot(x= cars$speed, y= cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x= cars$speed, y= cars$dist, ylab = "Stopping Distance")
plot(x= cars$speed, y= cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
?par
plot(cars, col= 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
mtcars
data("mtcars")
data(mtcars)
play()
str(mtcars)
nxt()
?boxplot()
?boxplot
boxplot(mpg ~cyl, data = mtcars)
hist(mtcars$mpg)
set.seed(1)
rpois(5, 2)
?rpois
?dpois
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
x
e
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
source('~/.active-rstudio-document')
makeVector(1-10)
x <- 1:10
xx <- makeVector(x)
xx
xx$get()
xx$getmean()
xx$setmean(mean(x))
xx$getmean()
xx$setmean("Hi; I am a mean")
xx$getmean()
cachemean(x)
xx$setmean(mean(x))
xx$getmean()
cachemean(x)
x$getmean()
x<- makeVector(1:10)
x$getmean()
x$setmean(mean(x))
x$setmean(mean(1:10))
x$getmean()
x<- 1:10
y <- makeVector(x)
y$getmean()
y$setmean(mean(x))
y$getmean()
z <- cachemean(y)
source('C:/Users/Stefan/Desktop/Data/2.R_Programming/Lesson3/ProgrammingAssignment2/cachematrix.R')
x <- matrix(c(1,2,3,4))
x
x <- matrix(c(1,2,3,4), nrow = 2, ncol = 2)
x
source('C:/Users/Stefan/Desktop/Data/2.R_Programming/Lesson3/ProgrammingAssignment2/cachematrix.R')
y<- makeCacheMatrix(x)
y
y$getinv()
y$setinv(solve(X))
source('~/.active-rstudio-document')
a <- makeVector()
a <- makeVector()
source('~/.active-rstudio-document')
a <- makeVector()
a
class(a)
class(a@set)
class(a4set)
class(a$set)
a$set(c(1,2,3,4,5,6,7))
x
a$get()
cachemean(a)
cachemean(a)
source('C:/Users/Stefan/Desktop/Data/2.R_Programming/Lesson3/ProgrammingAssignment2/cachematrix.R')
a<- makeCacheMatrix()
b<- makeCacheMatrix()
source('C:/Users/Stefan/Desktop/Data/2.R_Programming/Lesson3/ProgrammingAssignment2/cachematrix.R')
b<- makeCacheMatrix()
matrix(c(1:4), nrow = 2, ncol = 2)
z <- matrix(c(1:4), nrow = 2, ncol = 2)
b$set(z)
b$get()
cacheSolve(b)
cacheSolve(b)
b$getinv()
solve(b$get())
source('C:/Users/Stefan/Desktop/Data/2.R_Programming/Lesson3/ProgrammingAssignment2/cachematrix.R')
b$get()
cacheSolve(b)
cacheSolve(b)
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day<- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
ymd("1989-05-17")
my_date z- ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd(1989 May 17)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds =55)
this_moment
this_moment <- update(this_moment, hours = 14, minutes = 12, seconds =55)
this_moment
?now
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
url <- https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url, destfile = "C:/Users/Stefan/Desktop/Data/3.Getting_Cleaning_Data/Lesson4)
download.file(url, destfile = "C:/Users/Stefan/Desktop/Data/3.Getting_Cleaning_Data/Lesson4/Housing.csv")
house <- read.csv("C:/Users/Stefan/Desktop/Data/3.Getting_Cleaning_Data/Lesson4/Housing.csv")
?strsplit
View(house)
wgtp<- strsplit("wgtp")
View(house)
varnames <- names(house)
wgtp<- strsplit(varnames, "wgtp")
wgtp[123]
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
house <- read.csv("C:/Users/Stefan/Desktop/Data/3.Getting_Cleaning_Data/Lesson4/GDP.csv")
download.file(url, destfile = "C:/Users/Stefan/Desktop/Data/3.Getting_Cleaning_Data/Lesson4/GDP.csv")
gdp <- read.csv("C:/Users/Stefan/Desktop/Data/3.Getting_Cleaning_Data/Lesson4/GDP.csv")
View(gdp)
View(gdp)
?read.csv
gdp <- read.csv("C:/Users/Stefan/Desktop/Data/3.Getting_Cleaning_Data/Lesson4/GDP.csv", skip= 4)
money <- gdp[,5]
money
newmoney<- strsplit(money,",")
newmoney<- strsplit(money,"\\,")
newmoney<- sub(",","",money)
newmoney<- gsub(",","",money)
nummoney <- as.numeric(newmoney)
?mean
mean(nummoney, na.rm = TRUE)
nummoney
mean(nummoney[1:200], na.rm = TRUE)
View(gdp)
View(gdp)
gdp <- read.csv("C:/Users/Stefan/Desktop/Data/3.Getting_Cleaning_Data/Lesson4/GDP.csv", skip= 4, nrows = 200)
gdp <- read.csv("C:/Users/Stefan/Desktop/Data/3.Getting_Cleaning_Data/Lesson4/GDP.csv", skip= 4, nrows = 190)
money <- gdp[,5]
newmoney<- gsub(",","",money)
nummoney <- as.numeric(newmoney)
mean(nummoney, na.rm = TRUE)
countryNames <- gdp[,4]
grep("^United",countryNames)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
destfile <- "C:/Users/Stefan/Desktop/Data/3.Getting_Cleaning_Data/Lesson4/edu.csv"
download.file(url, destfile)
read.csv(destfile)
edu <- read.csv(destfile)
View(edu)
gdp_edu <- merge(gdp, edu, by.x = "X", by.y = "CountryCode")
View(gdp_edu)
?grep
grep("[Ff]iscal year end", gdp_edu$Special.Notes)
grep("[Ff]iscal year end", gdp_edu$Special.Notes, value = TRUE)
z <- grep("[Ff]iscal year end", gdp_edu$Special.Notes)
length(z)
z <- grep("[Ff]iscal year end", gdp_edu$Special.Notes, value = TRUE)
grep("[Jj]une",z, value = TRUE)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
library(lubridate)
year(sampleTimes) == 2012
y2012<- year(sampleTimes) == 2012
y2012<- year(sampleTimes) = 2012
y2012<- year(sampleTimes) == 2012
y2012[TRUE]
x <- sampleTimes[year(sampleTimes)==2012]
y2012 <- sampleTimes[year(sampleTimes)==2012]
y2012
length(y2012)
monday <- y2012[wday(y2012) ==2]
monday
length(monday)
library(dplyr)
library(lubridate)
setwd("C:/Users/Stefan/Desktop/Data/4.Exploratory_Data_Analysis/Lesson1")
power <- read.table("household_power_consumption.txt", sep = ";", header = TRUE, stringsAsFactors = FALSE)
power <- filter(power, Date == "1/2/2007" | Date == "2/2/2007")
power <- mutate(power, DateTime= dmy_hms(paste(power$Date,power$Time, sep = '_')),  Date = dmy(Date),
Time = hms(Time), Global_active_power= as.numeric(Global_active_power),
Sub_metering_1 = as.numeric(Sub_metering_1),
Sub_metering_2 = as.numeric(Sub_metering_2),
Sub_metering_3 = as.numeric(Sub_metering_3))
with(power, hist(Global_active_power, main = "Global Active Power",
col= "red", xlab = "Global Active Power (kilowatts)",
ylab= "Frequency"))
with(power, plot(DateTime, Global_active_power, type = "l", xlab = "", ylab =  "Global Active Power (kilowatts)"))
tidy <- gather(sub_met, key = Sub_metering, value = energy_sub_metering, -DateTime)
with(tidy, plot(DateTime, energy_sub_metering, type = "n", xlab = "", ylab = "Energy sub metering"))
lines(tidy$DateTime[tidy$Sub_metering == "Sub_metering_1"],
tidy$energy_sub_metering[tidy$Sub_metering == "Sub_metering_1"], col = "black")
lines(tidy$DateTime[tidy$Sub_metering == "Sub_metering_2"],
tidy$energy_sub_metering[tidy$Sub_metering == "Sub_metering_2"], col = "red")
lines(tidy$DateTime[tidy$Sub_metering == "Sub_metering_3"],
tidy$energy_sub_metering[tidy$Sub_metering == "Sub_metering_3"], col = "blue")
legend("topright", legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col = c("black","red","blue"), lty = 1)
with(power, plot(DateTime, Global_active_power, type = "l", xlab = "", ylab =  "Global Active Power (kilowatts)"))
tidy <- gather(sub_met, key = Sub_metering, value = energy_sub_metering, -DateTime)
library(tidyr)
tidy <- gather(sub_met, key = Sub_metering, value = energy_sub_metering, -DateTime)
tidy <- gather(power, key = Sub_metering, value = energy_sub_metering, -DateTime)
View(tidy)
View(power)
sub_met <- select(power, Sub_metering_1 : DateTime)
tidy <- gather(sub_met, key = Sub_metering, value = energy_sub_metering, -DateTime)
with(tidy, plot(DateTime, energy_sub_metering, type = "n", xlab = "", ylab = "Energy sub metering"))
lines(tidy$DateTime[tidy$Sub_metering == "Sub_metering_1"],
tidy$energy_sub_metering[tidy$Sub_metering == "Sub_metering_1"], col = "black")
lines(tidy$DateTime[tidy$Sub_metering == "Sub_metering_2"],
tidy$energy_sub_metering[tidy$Sub_metering == "Sub_metering_2"], col = "red")
lines(tidy$DateTime[tidy$Sub_metering == "Sub_metering_3"],
tidy$energy_sub_metering[tidy$Sub_metering == "Sub_metering_3"], col = "blue")
legend("topright", legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col = c("black","red","blue"), lty = 1)
with(power, plot(DateTime, Voltage, type = "l"))
with(power, plot(DateTime, Global_reactive_power, type = "l"))
?par
par(mfrow = c(2,2))
with(power, hist(Global_active_power, main = "Global Active Power",
col= "red", xlab = "Global Active Power (kilowatts)",
ylab= "Frequency"))
par(mfrow = c(2,2))
with(power, plot(DateTime, Global_active_power, type = "l", xlab = "", ylab =  "Global Active Power (kilowatts)"))
with(tidy, plot(DateTime, energy_sub_metering, type = "n", xlab = "", ylab = "Energy sub metering"))
lines(tidy$DateTime[tidy$Sub_metering == "Sub_metering_1"],
tidy$energy_sub_metering[tidy$Sub_metering == "Sub_metering_1"], col = "black")
lines(tidy$DateTime[tidy$Sub_metering == "Sub_metering_2"],
tidy$energy_sub_metering[tidy$Sub_metering == "Sub_metering_2"], col = "red")
lines(tidy$DateTime[tidy$Sub_metering == "Sub_metering_3"],
tidy$energy_sub_metering[tidy$Sub_metering == "Sub_metering_3"], col = "blue")
legend("topright", legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col = c("black","red","blue"), lty = 1)
par(mfrow = c(2,2))
with(power, plot(DateTime, Global_active_power, type = "l", xlab = "", ylab =  "Global Active Power (kilowatts)"))
with(power, plot(DateTime, Voltage, type = "l"))
with(tidy, plot(DateTime, energy_sub_metering, type = "n", xlab = "", ylab = "Energy sub metering"))
lines(tidy$DateTime[tidy$Sub_metering == "Sub_metering_1"],
tidy$energy_sub_metering[tidy$Sub_metering == "Sub_metering_1"], col = "black")
lines(tidy$DateTime[tidy$Sub_metering == "Sub_metering_2"],
tidy$energy_sub_metering[tidy$Sub_metering == "Sub_metering_2"], col = "red")
lines(tidy$DateTime[tidy$Sub_metering == "Sub_metering_3"],
tidy$energy_sub_metering[tidy$Sub_metering == "Sub_metering_3"], col = "blue")
legend("topright", legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col = c("black","red","blue"), lty = 1)
with(power, plot(DateTime, Global_reactive_power, type = "l"))
par(mfrow = c(2,2))
with(power, plot(DateTime, Global_active_power, type = "l", xlab = "", ylab =  "Global Active Power (kilowatts)"))
with(tidy, plot(DateTime, energy_sub_metering, type = "n", xlab = "", ylab = "Energy sub metering"))
lines(tidy$DateTime[tidy$Sub_metering == "Sub_metering_1"],
tidy$energy_sub_metering[tidy$Sub_metering == "Sub_metering_1"], col = "black")
lines(tidy$DateTime[tidy$Sub_metering == "Sub_metering_2"],
tidy$energy_sub_metering[tidy$Sub_metering == "Sub_metering_2"], col = "red")
lines(tidy$DateTime[tidy$Sub_metering == "Sub_metering_3"],
tidy$energy_sub_metering[tidy$Sub_metering == "Sub_metering_3"], col = "blue")
legend("topright", legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col = c("black","red","blue"), lty = 1)
par(mfrow = c(2,2))
with(power, plot(DateTime, Global_active_power, type = "l", xlab = "", ylab =  "Global Active Power (kilowatts)"))
with(power, plot(DateTime, Voltage, type = "l"))
with(tidy, plot(DateTime, energy_sub_metering, type = "n", xlab = "", ylab = "Energy sub metering"))
lines(tidy$DateTime[tidy$Sub_metering == "Sub_metering_1"],
tidy$energy_sub_metering[tidy$Sub_metering == "Sub_metering_1"], col = "black")
lines(tidy$DateTime[tidy$Sub_metering == "Sub_metering_2"],
tidy$energy_sub_metering[tidy$Sub_metering == "Sub_metering_2"], col = "red")
lines(tidy$DateTime[tidy$Sub_metering == "Sub_metering_3"],
tidy$energy_sub_metering[tidy$Sub_metering == "Sub_metering_3"], col = "blue")
legend("topright", legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col = c("black","red","blue"), lty = 1)
with(power, plot(DateTime, Global_reactive_power, type = "l"))
png(filename = "plot1.png")
with(power, hist(Global_active_power, main = "Global Active Power",
col= "red", xlab = "Global Active Power (kilowatts)",
ylab= "Frequency"))
dev.off() ## Close png device
?png
par(mfrow = c(2,2))
with(power, plot(DateTime, Global_active_power, type = "l", xlab = "", ylab =  "Global Active Power (kilowatts)"))
with(tidy, plot(DateTime, energy_sub_metering, type = "n", xlab = "", ylab = "Energy sub metering"))
lines(tidy$DateTime[tidy$Sub_metering == "Sub_metering_1"],
tidy$energy_sub_metering[tidy$Sub_metering == "Sub_metering_1"], col = "black")
lines(tidy$DateTime[tidy$Sub_metering == "Sub_metering_2"],
tidy$energy_sub_metering[tidy$Sub_metering == "Sub_metering_2"], col = "red")
lines(tidy$DateTime[tidy$Sub_metering == "Sub_metering_3"],
tidy$energy_sub_metering[tidy$Sub_metering == "Sub_metering_3"], col = "blue")
legend("topright", legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col = c("black","red","blue"), lty = 1)
with(power, plot(DateTime, Global_active_power, type = "l", xlab = "", ylab =  "Global Active Power (kilowatts)"))
with(power, plot(DateTime, Voltage, type = "l"))
with(power, plot(DateTime, Global_active_power, type = "l", xlab = "", ylab =  "Global Active Power (kilowatts)"))
with(power, plot(DateTime, Voltage, type = "l"))
with(tidy, plot(DateTime, energy_sub_metering, type = "n", xlab = "", ylab = "Energy sub metering"))
lines(tidy$DateTime[tidy$Sub_metering == "Sub_metering_1"],
tidy$energy_sub_metering[tidy$Sub_metering == "Sub_metering_1"], col = "black")
lines(tidy$DateTime[tidy$Sub_metering == "Sub_metering_2"],
tidy$energy_sub_metering[tidy$Sub_metering == "Sub_metering_2"], col = "red")
lines(tidy$DateTime[tidy$Sub_metering == "Sub_metering_3"],
tidy$energy_sub_metering[tidy$Sub_metering == "Sub_metering_3"], col = "blue")
legend("topright", legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col = c("black","red","blue"), lty = 1)
with(power, plot(DateTime, Global_reactive_power, type = "l"))
getwd()
setwd("ExData_Plotting1")
source('C:/Users/Stefan/Desktop/Data/4.Exploratory_Data_Analysis/Lesson1/ExData_Plotting1/plot1.R')
SETWD("C:/Users/Stefan/Desktop/Data/4.Exploratory_Data_Analysis/Lesson")
setwd("C:/Users/Stefan/Desktop/Data/4.Exploratory_Data_Analysis/Lesson1")
source('C:/Users/Stefan/Desktop/Data/4.Exploratory_Data_Analysis/Lesson1/ExData_Plotting1/plot1.R')
source('C:/Users/Stefan/Desktop/Data/4.Exploratory_Data_Analysis/Lesson1/ExData_Plotting1/plot2.R')
source('C:/Users/Stefan/Desktop/Data/4.Exploratory_Data_Analysis/Lesson1/ExData_Plotting1/plot3.R')
source('C:/Users/Stefan/Desktop/Data/4.Exploratory_Data_Analysis/Lesson1/ExData_Plotting1/plot4.R')
